{"version":3,"sources":["webpack:///./src/IssueList.jsx?e290"],"names":["IssueRow","props","onDeleteClick","deleteIssue","issue","_id","substr","status","owner","created","toDateString","effort","completionDate","title","propTypes","PropTypes","object","isRequired","func","IssueTable","issueRows","issues","map","array","IssueList","context","console","log","initialState","data","records","forEach","Date","state","toastVisible","toastMessage","toastType","setFilter","bind","showError","dismissToast","loadData","prevProps","oldQuery","location","query","newQuery","effort_gte","effort_lte","message","setState","fetch","search","then","response","ok","json","_metadata","total_count","error","catch","err","router","push","pathname","id","method","React","Component","contextTypes"],"mappings":"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","file":"0.d624ae1e00a800995b7b.hot-update.js","sourcesContent":["\nimport React from 'react';\nimport 'isomorphic-fetch';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router';\nimport { Button, Glyphicon, Table, Panel } from 'react-bootstrap';\n\nimport IssueFilter from './IssueFilter.jsx';\nimport Toast from './Toast.jsx';\nimport IssueAddNavItem from './IssueAddNavItem.jsx';\n\nconst IssueRow = (props) => {\n  function onDeleteClick() {\n    props.deleteIssue(props.issue._id);\n  }\n  return(\n    <tr>\n      <td>\n        <Link to={`/issues/${props.issue._id}`}>\n          { props.issue._id.substr(-4) }\n        </Link>\n      </td>\n      <td>{props.issue.status}</td>\n      <td>{props.issue.owner}</td>\n      <td>{props.issue.created.toDateString()}</td>\n      <td>{props.issue.effort}</td>\n      <td>{props.issue.completionDate ? props.issue.completionDate.toDateString() : ''}</td>\n      <td>{props.issue.title}</td>\n      <td>\n        <Button bsSize=\"xsmall\" onClick={onDeleteClick}>\n          <Glyphicon glyph=\"trash\" />\n        </Button>\n      </td>\n    </tr>\n  );\n};\nIssueRow.propTypes = {\n  issue: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n  deleteIssue: PropTypes.func.isRequired,\n};\nfunction IssueTable(props) {\n  const issueRows = props.issues.map(issue => <IssueRow key={issue._id} issue={issue} deleteIssue={props.deleteIssue} />);\n  return (\n    <Table bordered condensed responsive hover>\n      <thead>\n        <tr>\n          <th>Id</th>\n          <th>Status</th>\n          <th>Owner</th>\n          <th>Created</th>\n          <th>Effort</th>\n          <th>Completion Date</th>\n          <th>Title</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>{issueRows}</tbody>\n    </Table>\n  );\n}\nIssueTable.propTypes = {\n  issues: PropTypes.array.isRequired, // eslint-disable-line react/forbid-prop-types\n  deleteIssue: PropTypes.func.isRequired,\n};\n\nexport default class IssueList extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    console.log(props);\n    const issues = context.initialState.data.records;\n    console.log(props,context);\n    issues.forEach(issue => {\n      issue.created = new Date(issue.created);\n      if (issue.completionDate) {\n        issue.completionDate = new Date(issue.completionDate);\n      }\n    });\n    this.state = { \n      issues,\n      toastVisible: false, toastMessage: '', toastType: 'success',\n    };\n    this.setFilter = this.setFilter.bind(this);\n    this.deleteIssue = this.deleteIssue.bind(this);\n    this.showError = this.showError.bind(this);\n    this.dismissToast = this.dismissToast.bind(this);\n  }\n  componentDidMount() {\n    this.loadData();\n  }\n  //this function look for any changes in filter fields and invoked immediately after updating occurs\n  componentDidUpdate(prevProps) {//prevProps means state of props before changing\n    const oldQuery = prevProps.location.query;//location - URL address of prevProps\n    const newQuery = this.props.location.query;\n    //if comparing show no changes, return prevProps as it was\n    if (oldQuery.status === newQuery.status &&\n        oldQuery.effort_gte === newQuery.effort_gte &&\n        oldQuery.effort_lte === newQuery.effort_lte) {\n      return;\n    }\n    this.loadData();\n  }\n  showError(message) {\n    this.setState({ toastVisible: true, toastMessage: message, toastType: 'danger' });\n  }\n  dismissToast() {\n    this.setState({ toastVisible: false });\n  }\n  loadData() {\n    //this.props.location.search = ?effort_gte=some_number&status(filter value in unparsed URL)\n    fetch(`/api/issues${this.props.location.search}`).then(response => {\n      if (response.ok) {// ok = true and means, that response was successful\n        response.json().then((data) => {\n          //data is a variable, which get data from server, _metadata is an object of that data\n          console.log('Total count of records:', data._metadata.total_count);//total count is a property of metadata\n          data.records.forEach((issue) => {//records is a property which keeps issues = [{...}] inside it\n            issue.created = new Date(issue.created);//assign date of creation issue\n            if (issue.completionDate) { // if user appointed date to complete issue\n              issue.completionDate = new Date(issue.completionDate);//take this and put in object Date()\n            }\n          });\n          this.setState({ issues: data.records });//then change the state issues:[] to real issues data\n        });\n      } else {\n        response.json().then((error) => {\n          this.showError(`Failed to fetch issues:${error.message}`);\n        });\n      }\n    }).catch((err) => {\n      this.showError('Error in fetching data from server:', err);\n    });\n  }\n  //this method calls from the IssueFilter component\n  setFilter(query){//takes 'query' which is an object f.e.g.{ status: 'Open', effort_gte: '10', effort_lte: '11'} according to filter settings\n    //and push it to browser URL as a query string looks like ?effort_gte=10&effort_lte=11&status=Open\n    this.props.router.push({ pathname: this.props.location.pathname, query });\n  }\n  //this method calls from the IssueAdd component\n  \n  deleteIssue(id) {\n    fetch(`/api/issues/${id}`, {method: 'DELETE'}).then(response => {\n      if (!response.ok) {\n        this.showError('Failed to delete issue');\n      } else {\n        this.loadData();\n      }\n    })\n  }\n  render() {\n    return (\n      <div>\n        <Panel collapsible header=\"Filter\">\n          <IssueFilter setFilter={this.setFilter} initFilter={this.props.location.query} />\n        </Panel>\n        <hr />\n        <IssueTable issues={this.state.issues} deleteIssue={this.deleteIssue} />\n        <hr />\n        <Toast showing={this.state.toastVisible} message={this.state.toastMessage} onDismiss={this.dismissToast} \n        bsStyle={this.state.toastType}/>\n      </div>\n    );\n  }\n}\nIssueList.propTypes = {\n  location: PropTypes.object.isRequired,\n  router: PropTypes.object,\n}\nIssueList.contextTypes = {\n  initialState: PropTypes.object,\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/IssueList.jsx"],"sourceRoot":""}