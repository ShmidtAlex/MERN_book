{"version":3,"sources":["webpack:///./src/Routes.jsx?ff51","webpack:///./src/IssueEdit.jsx?74ff","webpack:///./src/NumInput.jsx?fa95","webpack:///./src/DateInput.jsx?99be"],"names":["NoMatch","App","IssueList","IssueEdit","props","context","issue","initialState","data","created","Date","completionDate","state","invalidFields","showingValidation","toastVisible","toastMessage","toastType","onChange","bind","onValidityChange","onSubmit","dismissValidation","showValidation","showSuccess","showError","dismissToast","loadData","prevProps","params","id","event","valid","Object","assign","target","name","setState","convertedValue","value","undefined","preventDefault","keys","length","fetch","method","headers","body","JSON","stringify","then","response","ok","json","updatedIssue","error","message","catch","err","validationMessage","ControlLabel","_id","toDateString","status","owner","NumInput","effort","DateInput","title","React","Component","propTypes","PropTypes","object","isRequired","contextTypes","format","onBlur","newProps","e","unformat","match","num","toString","str","val","parseInt","console","log","isNaN","number","func","editFormat","focused","onFocus","date","toISOString","substr","getTime","displayFormat","childProps","string"],"mappings":"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","file":"0.e5a66f1072ff8f5f7c7d.hot-update.js","sourcesContent":["import React from 'react';\nimport { Route, IndexRedirect, withRouter } from 'react-router';\n\nimport App from './App.jsx';\nimport IssueList from './IssueList.jsx';\nimport IssueEdit from './IssueEdit.jsx';\n\nconst NoMatch = () => <p>Page Not Found</p>;\n\nexport default (\n  <Route path=\"/\" component={App} >\n    <IndexRedirect to=\"/issues\" />\n    <Route path=\"issues\" component={withRouter(IssueList)} />\n    <Route path=\"issues/:id\" component={IssueEdit} />\n    <Route path=\"*\" component={NoMatch} />\n  </Route>\n);\n\n\n// WEBPACK FOOTER //\n// ./src/Routes.jsx","import React from 'react';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport {Form, Col, FormGroup, FormControl, ControlLabel, ButtonToolbar, Button, Panel, Alert } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport NumInput from './NumInput.jsx';\nimport DateInput from './DateInput.jsx';\nimport Toast from './Toast.jsx';\n\nexport default class IssueEdit extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    const issue = context.initialState.data;\n    issue.created = new Date(issue.created);\n    issue.completionDate = issue.completionDate != null ? new Date(issue.completionDate) : null;\n    this.state = {\n      issue,\n      invalidFields: {}, showingValidation: false,\n      toastVisible: false, toastMessage: '', toastType: 'success',\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onValidityChange = this.onValidityChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.dismissValidation = this.dismissValidation.bind(this);\n    this.showValidation = this.showValidation.bind(this);\n    this.showSuccess = this.showSuccess.bind(this);\n    this.showError = this.showError.bind(this);\n    this.dismissToast = this.dismissToast.bind(this);\n  }\n  componentDidMount() {\n    this.loadData();\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.params.id !== this.props.params.id){\n      this.loadData();\n    }\n  }\n  //we got 'valid' argument from child component\n  onValidityChange(event, valid) {\n    const invalidFields = Object.assign({}, this.state.invalidFields);\n    //in case, where user typed any wrong value,\n    if (!valid) {\n      invalidFields[event.target.name] = true;\n    } else {\n      //if it is correct initially or was corrected by user before submit\n      delete invalidFields[event.target.name];\n    }\n    //this manage only that state, which exists before submit\n    this.setState({ invalidFields });\n  }\n  //this works only without submit yet\n  onChange(event, convertedValue){\n    //clone state object to empty object 'issue' for the purpose of access to the 'name' properties of inputs\n    const issue = Object.assign({}, this.state.issue);\n    const value = (convertedValue !== undefined) ? convertedValue : event.target.value;\n    //f.e.g: event.target.name = status, event.target.value = New or date:'some date in string format'; \n    //we use target's name as a key in the state object to set the value in the state object\n   issue[event.target.name] = value;\n    //change this.state object conserning to new status\n    this.setState({ issue });\n\n  }\n  //the normal practice in react is creating our own submit function, and don't use default one\n  onSubmit(event) {\n    //because of 'submission' imply validation, which we have already done.\n    //(and if we don't use preventDefault, we get 'Error in sending data to server' message in this case)\n    event.preventDefault();\n    this.showValidation(); //shows validation message if some error\n    //this one enumerate all properties of this.state.invalidFields (including properties of prototype)\n    if (Object.keys(this.state.invalidFields).length !== 0) {\n      return;\n    }\n      fetch(`/api/issues/${this.props.params.id}`, {\n      method: 'PUT',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify(this.state.issue),\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(updatedIssue => {\n          updatedIssue.created = new Date(updatedIssue.created);\n          if (updatedIssue.completionDate) {\n            updatedIssue.completionDate = new Date(updatedIssue.completionDate);\n          }\n          this.setState({ issue: updatedIssue });\n          this.showSuccess('Updated issue successfully.');\n        });\n      } else {\n        response.json().then(error => {\n          this.showError(`Failed to update issue: ${error.message}`);\n        });\n      }\n    }).catch(err => {\n      this.showError(`Error in sending data to server: ${err.message}`);\n    });\n  }\n \n  loadData() {\n    //this.props.params.id means the issue id\n    fetch(`/api/issues/${this.props.params.id}`).then(response => {\n      if(response.ok) {\n        response.json().then(issue => {\n          //convert date to string\n          issue.created = new Date(issue.created);\n          //if issue.comletionDate NOT equal null, convert given new Date object to string, else - leave it empty\n          issue.completionDate = issue.completionDate != null ? new Date(issue.completionDate) : null;\n          //change this.state accordingly converted data\n          this.setState({ issue });\n        });\n      } else {\n        response.json().then(error => {\n          this.showError(`Failed to fetch issue: ${error.message}`);\n        });\n      }\n    }).catch(err => {\n      this.showError(`Error in fetching data from server: ${err.message}`);\n    });\n  }\n   showValidation() {\n    this.setState({ showingValidation: true });\n  }\n  dismissValidation() {\n    this.setState({ showingValidation: false });\n  }\n  showSuccess(message) {\n    this.setState({ toastVisible: true, toastMessage: message, toastType: 'success' });\n  }\n  showError(message) {\n    this.setState({ toastVisible: true, toastMessage: message, toastType: 'danger'});\n  }\n  dismissToast() {\n    this.setState({ toastVisible: false });\n  }\n  render() {\n    const issue = this.state.issue;\n    let validationMessage  = null; \n    if (Object.keys(this.state.invalidFields).length !== 0 && this.state.showingValidation) {\n      validationMessage = (\n        <Alert bsStyle=\"danger\" onDismiss={this.dismissValidation}>\n          Please, correct invalid fields before submitting.\n        </Alert>\n      );\n    }\n    return (\n      <Panel header=\"Edit Issue\">\n        <Form horizontal onSubmit={this.onSubmit}>\n          {/*horizontal helps us to set up pretty view of lines in this table*/}\n        <FormGroup>\n          <Col componentClass={ControlLabel} sm={3}> ID: </Col>\n          <Col sm={9}>\n            <FormControl.Static> {issue._id}</FormControl.Static>\n          </Col>\n        </FormGroup>\n        <FormGroup>\n          {/*we use ControlLabel as a componentClass of Col tag, because of we whish to combine Col and ControlLabel in one tag\n          and if it will be just simply put together (which is normally for others tags) we'll lose indentation*/}\n          <Col componentClass={ ControlLabel } sm={3}> Created: </Col>\n          <Col sm={9}>\n            {/*we  use .Static for the sake of clarity, that the element is unchangeable*/}\n            <FormControl.Static> {issue.created ? issue.created.toDateString() : ''}</FormControl.Static>\n          </Col>\n        </FormGroup>\n        <FormGroup>\n          <Col componentClass={ ControlLabel } sm={3}> Status: </Col>\n          <Col sm={9}>\n            <FormControl componentClass=\"select\" name=\"status\" value={issue.status} onChange={this.onChange}>\n              <option value=\"New\">New</option>\n              <option value=\"Open\">Open</option>\n              <option value=\"Assigned\">Assigned</option>\n              <option value=\"Fixed\">Fixed</option>\n              <option value=\"Verified\">Verified</option>\n              <option value=\"Closed\">Closed</option>\n            </FormControl>\n          </Col>\n        </FormGroup>\n        <FormGroup>\n          <Col componentClass={ ControlLabel } sm={3}> Owner: </Col>\n          <Col sm={9}>\n            <FormControl name=\"owner\" value={issue.owner} onChange={this.onChange}/>\n          </Col>\n        </FormGroup>\n        <FormGroup>\n          <Col componentClass={ ControlLabel } sm={3}> Effort:</Col>\n          <Col sm={9}>\n            <FormControl componentClass={NumInput} name=\"effort\" value={issue.effort} onChange={this.onChange}/>\n          </Col>\n        </FormGroup>\n      {/*validationState is an instrument of react-bootstrap. variants of values of validateState are these:\n      error, succes, warning. in our case it'll be 'error' or 'null'*/}\n        <FormGroup validationState={this.state.invalidFields.completionDate ? 'error' : null}>\n          <Col componentClass={ ControlLabel } sm={3}> Completion Date:</Col>\n          <Col sm={9}>\n            <FormControl componentClass={DateInput} name=\"completionDate\" value={issue.completionDate} \n            onChange={this.onChange} onValidityChange={this.onValidityChange} />\n          {/*Feetback means the icon in the line if validation isn't passed*/}\n            <FormControl.Feedback />\n          </Col>\n        </FormGroup>\n        <FormGroup>\n          <Col componentClass={ ControlLabel } sm={3}> Title:</Col>\n          <Col sm={9}>\n            <FormControl name=\"title\" value={issue.title} onChange={this.onChange}/>\n          </Col>\n        </FormGroup>\n        <FormGroup>\n          <Col smOffset={3} sm={6}> \n            <ButtonToolbar>\n              <Button bsStyle=\"primary\" type=\"submit\">Submit</Button>\n              <LinkContainer to=\"/issues\"> \n                <Button bsStyle=\"link\" type=\"submit\">Back</Button>\n              </LinkContainer>\n            </ButtonToolbar>\n          </Col>\n        </FormGroup>\n        <FormGroup>\n          <Col smOffset={3} sm={6}>{validationMessage}</Col>\n        </FormGroup>\n        </Form>\n        <Toast showing={this.state.toastVisible} message={this.state.toastMessage} onDismiss={this.dismissToast}\n        bsStyle={this.state.toastType}/>\n        {/*every input, including 'select', has 'name' property for differetiate one from one for onChange\n          function, which is common method for all of the inputs*/}\n        {/*'this' helps us identify a target of event in onChange() function*/}\n      {/*LinkContainer allows styling button as a link and send user to issues page*/}\n      </Panel>\n       \n    );\n  }\n}\nIssueEdit.propTypes = {\n  params: PropTypes.object.isRequired,\n};\nIssueEdit.contextTypes = {\n  initialState: PropTypes.object,\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/IssueEdit.jsx","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class NumInput extends React.Component {\n  constructor(props) {\n    super(props);\n    //local state with transient state\n    this.state = { value: this.format(props.value) };\n    this.onBlur = this.onBlur.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n  componentWillReceiveProps(newProps) {\n    this.setState({ value: this.format(newProps.value) });\n  }\n  onBlur(e) {\n    //pass local, transient state to parent after user finished edit, where it became persistence one\n    this.props.onChange(e, this.unformat(this.state.value));\n  }\n  onChange(e) {\n    //change persistent state accordingly local state, if it's validated successfully\n    if(e.target.value.match(/^\\d*$/)) {\n      this.setState({ value: e.target.value });\n    }\n  }\n  format(num) {\n    //convert number to string, otherwise leave the field empty\n    return num !=null ? num.toString() : '';\n  }\n  unformat(str) {\n    //convert string to a number, check if it is a number really, and put it \n    //into the field, otherwise put null value to the field\n    const val = parseInt(str, 10);\n    console.log(val);\n    return isNaN(val) ? null : val;\n  }\n  render() {\n    return(\n      //{...this.props} passing parent's properties into this input's properties\n      //Note, that it is very significant, where we place it concerning native properties, first one overrided by last one\n      <input type='text' {...this.props} value={this.state.value} onBlur={this.onBlur} onChange={this.onChange}/>\n    )\n  }\n}\nNumInput.propTypes = {\n  value: PropTypes.number,\n  onChange: PropTypes.func.isRequired,\n}\n\n\n// WEBPACK FOOTER //\n// ./src/NumInput.jsx","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class DateInput extends React.Component {\n  constructor(props) {\n    super(props);\n    //state for date field initially not focused, and valid, because of shows valid data\n    this.state = { value: this.editFormat(props.value), focused: false, valid: true };\n    this.onFocus = this.onFocus.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n  componentWillReceiveProps(newProps) {\n  //newProps here is edited by user date field. if it was editet, this.state knows about this new values\n    if (newProps.value !== this.props.value) {\n      this.setState({ value: this.editFormat(newProps.value) });\n    }\n  }\n  onFocus() {\n    //this one only changed the focused value in this.state, when user clicked on date field\n    this.setState({ focused: true });\n  }\n  onBlur(e) {\n    //if user typed wrong date, value will be null/ if correct, it will be new date, which he typed\n    const value = this.unformat(this.state.value);\n    //if user type wrong date, valid will be false/ if correct, it will be true\n    const valid = this.state.value === '' || value != null;\n    //if this.state.value != '' && this.unformat(this.state.value) != null\n    //and also if there is any value in onValidityChange prop from parent component\n    if (valid !== this.state.valid && this.props.onValidityChange) {\n      //that parent component recieves two arguments, including 'valid' (this.unformat(this.state value))\n      this.props.onValidityChange(e, valid);\n    }\n    //then we miss focuse, and confirm that valid is true\n    this.setState({ focused: false, valid });\n    if (valid) {\n      //setting parent's onChange with the edited by user and correct date\n      this.props.onChange(e, value);\n    }\n  }\n  onChange(e) {\n    //if new value from user corresponding to RegExp, this value can exist in this field, otherwise it even doesn't typing in\n    if (e.target.value.match(/^[\\d-]*$/)) {\n      this.setState({ value: e.target.value });\n    }\n  }\n  displayFormat(date) {\n    return (date != null) ? date.toDateString() : '';\n  }\n  editFormat(date) {\n    //if there is any date, convert it to string ISO standart from 0 index to 9 (10 symb.length)\n    return (date != null) ? date.toISOString().substr(0, 10) : '';\n  }\n  unformat(str) {\n    //this one check is new unsetted state is a number, and if it is, allows it exist in this field\n    const val = new Date(str);\n    return isNaN(val.getTime()) ? null : val;\n  }\n  render() {\n  {/*define the conditions for clasName='invalid' (for next styling it and showing to user, that it is)*/}\n   \n    const value = (this.state.focused || !this.state.valid) ? this.state.value : this.displayFormat(this.props.value);\n    const childProps = Object.assign({}, this.props); {/*clone parent props to const childProps*/}\n    delete childProps.onValidityChange; {/*remove unnecessary property onValidityChange*/}\n    return (\n      <input type=\"text\" {...childProps} value={value} \n      placeholder={this.state.focused ? 'yyyy-mm-dd' : null} \n      onFocus={this.onFocus} onBlur={this.onBlur} onChange={this.onChange} />\n    );\n  }\n}\nDateInput.propTypes = {\n  value: PropTypes.object,\n  onChange: PropTypes.func.isRequired,\n  onValidityChange: PropTypes.func,\n  name: PropTypes.string.isRequired,\n}\n\n\n// WEBPACK FOOTER //\n// ./src/DateInput.jsx"],"sourceRoot":""}