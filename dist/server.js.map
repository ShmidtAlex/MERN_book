{"version":3,"sources":["../server/server.js"],"names":["SourceMapSupport","install","app","use","express","static","bodyParser","json","db","get","req","res","filter","query","status","effort_lte","effort_gte","effort","$lte","parseInt","$gte","collection","find","toArray","then","metadata","total_count","issues","length","_metadata","records","catch","console","log","error","message","post","newIssue","body","created","Date","err","Issue","validateIssue","insertOne","cleanupIssue","_id","result","insertedId","limit","next","savedIssue","issueId","params","id","ObjectId","issue","put","updateOne","convertIssue","delete","deleteOne","deleteResult","n","renderedPageRouter","MongoClient","connect","connection","listen"],"mappings":"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","file":"server.js","sourcesContent":["//# sourceMappingURL=server.js.map\nimport SourceMapSupport from 'source-map-support';\nSourceMapSupport.install();\nimport 'babel-polyfill';\n\nimport express from \"express\";\nimport bodyParser from 'body-parser';\n//import mongodb driver features\nimport { MongoClient, ObjectId } from 'mongodb';\nimport Issue from './issue.js';\nimport renderedPageRouter from './renderedPageRouter.jsx';\n\n//create express instance\nconst app = express();\n//using middleware static, show that static files placed in 'static' folder\napp.use(express.static('static'));\n//create and mount bodyParser middleware, which helps to parse .json file \n//to simple object, at the application level\napp.use(bodyParser.json());\n//create global variable for mongoDB connection\nlet db;\n\n//this API is designed for finding issues by filter\n//'/api' is a prefix, which shows that issues is an API, it's not path\napp.get('/api/issues', (req, res) => {\n  const filter = {};//by default filter is empty object\n  if (req.query.status) {//if in parsed query string from request from client there is any status,\n    //now filter's status is equal to status from parsed query string\n    filter.status = req.query.status;\n  }\n  if (req.query.effort_lte || req.query.effort_gte) {\n    filter.effort = {};\n  }\n  if (req.query.effort_lte ) {\n    filter.effort.$lte = parseInt(req.query.effort_lte, 10);\n  }\n  if (req.query.effort_gte ) {\n    filter.effort.$gte = parseInt(req.query.effort_gte, 10);\n  }\n  //any collection in mongo DB has method 'collection', which allows us supply the name\n  //of collection (issues in this case), to indicate exactly which collection from data base\n  db.collection('issues').find(filter).toArray()\n  .then(issues => {\n    //returning document given by find(filter) method \n    const metadata = { total_count: issues.length };\n    res.json({ _metadata: metadata, records: issues });\n  })\n  .catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server error ${error}` });\n  });\n});\n\n\n//this API is designed for creating new 'issues'\n//.post creates an object which is supplied from the body\napp.post('/api/issues',(req, res) => {\n  //req.body containts the body of created new issue, it's valid for post \n  //NOTE: req.body will be undefined, if there is no middleware (bodyParser f.e.x) for interpret\n  const newIssue = req.body;\n  newIssue.created = new Date();//because of we have no filed for setting date, we assign it here\n  //if created issue doesn't have any status from user initally, assign status 'New'\n  if (!newIssue.status) {\n    newIssue.status = 'New';\n  }\n  const err = Issue.validateIssue(newIssue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n  //insert newIssue variable, which contains created issue to data base\n  //before insert validate newIssue by cleanupIssue function from imported Issue variable\n  db.collection('issues').insertOne(Issue.cleanupIssue(newIssue)).then(result => \n    //while it's inserting, it gets new id, which stored in property insertedId\n    db.collection('issues').find({_id: result.insertedId}).limit(1)\n    .next()\n  )\n  .then(savedIssue => {\n    res.json(savedIssue);\n  })\n  .catch(error => {\n    console.log(error);\n    res.status(500).json({message: `Internal Server Error: ${error}` });\n  });\n});\n\napp.get('/api/issues/:id', (req, res) => {\n  let issueId;\n  console.log(req.params.id);\n  try {\n    issueId = new ObjectId(req.params.id);//for using ObjectId() you need import it from mongodb\n  } catch(error) {\n    res.status(422).json({ message: `Invalid issue ID format : ${error}` });\n    return;\n  }\n  db.collection('issues').find({ _id: issueId }).limit(1)\n    .next()\n    .then(issue => {\n      if(!issue) {\n        res.status(404).json({ message: `No such issue: ${issueId}` });\n      } else {\n        res.json(issue);\n      }\n    })\n    .catch(error => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error: ${error}`});\n    });\n});\n//Update API\napp.put('/api/issues/:id', (req, res) => {\n  let issueId;\n  try {\n    issueId = new ObjectId(req.params.id);\n  } catch (error) {\n    res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n    return;\n  }\n  const issue = req.body;\n  delete issue._id;\n  const err = Issue.validateIssue(issue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n  db.collection('issues').updateOne({ _id: issueId }, Issue.convertIssue(issue)).then(() => \n      db.collection('issues').find({ _id: issueId }).limit(1)\n      .next()\n    )\n    .then(savedIssue => {\n      res.json(savedIssue);\n    })\n    .catch(error => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n//delete API:\napp.delete('/api/issues/:id', (req, res) => {\n  let issueId;\n  try {\n    issueId = new ObjectId(req.params.id);\n  } catch (error) {\n    res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n    return;\n  }\n  db.collection('issues').deleteOne({ _id: issueId }).then((deleteResult) => {\n    if(deleteResult.result.n === 1){\n      res.json({ status: \"OK\" });\n    } else {\n      res.json({ status: \"Warning: object not found\"});\n    }\n  })\n  .catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal server error: ${error}`});\n  });\n});\napp.use('/', renderedPageRouter);\n//MongoClient is an object provided by mongodb module, allows us act as a client\n//'connect' method connecting the database from Node.js\nMongoClient.connect('mongodb://localhost/IssueTracker').then(connection => {\n  //assign our connection with mongo database (called IssueTracker) to global varibale db\n  db = connection.db('IssueTracker');\n  app.listen(3000, () => {//start express server after getting connection\n    console.log(\"App started on port 3000\");\n  }); \n}).catch(error => {\n  console.log('ERROR:', error);\n});\n//returning one and only one real page in our SPA for avoid situation, when router\n//can't find correct path /api/issues,(instead it find /issues) \n//after hitting 'reload' button in browser/ it also affects webpack.config 'historyApiFallback'"]}