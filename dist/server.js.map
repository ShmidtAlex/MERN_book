{"version":3,"sources":["../server/server.js"],"names":["SourceMapSupport","install","app","use","express","static","bodyParser","json","db","get","req","res","filter","query","status","effort_lte","effort_gte","effort","$lte","parseInt","$gte","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","console","log","message","post","newIssue","body","created","Date","err","Issue","validateIssue","insertOne","cleanupIssue","result","_id","insertedId","limit","next","savedIssue","issueId","params","id","ObjectId","issue","sendFile","path","resolve","MongoClient","connect","connection","listen"],"mappings":"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","file":"server.js","sourcesContent":["import SourceMapSupport from 'source-map-support';\nSourceMapSupport.install();\nimport 'babel-polyfill';\n\nimport express from \"express\";\nimport bodyParser from 'body-parser';\nimport path from 'path';\n//import mongodb driver features\nimport { MongoClient, ObjectId } from 'mongodb';\nimport Issue from './issue.js'\n//create express instance\nconst app = express();\n//using middleware static, show that static files placed in 'static' folder\napp.use(express.static('static'));\n//create and mount bodyParser middleware, which helps to parse .json file \n//to simple object, at the application level\napp.use(bodyParser.json());\n//create global variable for mongoDB connection\nlet db;\n\n//this API is designed for finding issues by filter\n//'/api' is a prefix, which shows that issues is an API, it's not path\napp.get('/api/issues', (req, res) => {\n  const filter = {};//by default filter is empty object\n  if (req.query.status) {//if in parsed query string from request from client there is any status,\n    //now filter's status is equal to status from parsed query string\n    filter.status = req.query.status;\n  }\n  if (req.query.effort_lte || req.query.effort_gte) {\n    filter.effort = {};\n  }\n  if (req.query.effort_lte ) {\n    filter.effort.$lte = parseInt(req.query.effort_lte, 10);\n  }\n  if (req.query.effort_gte ) {\n    filter.effort.$gte = parseInt(req.query.effort_gte, 10);\n  }\n  //any collection in mongo DB has method 'collection', which allows us supply the name\n  //of collection (issues in this case), to indicate exactly which collection from data base\n  db.collection('issues').find(filter).toArray()\n  .then(issues => {\n    //returning document given by find(filter) method \n    const metadata = { total_count: issues.length };\n    res.json({ _metadata: metadata, records: issues });\n  })\n  .catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server error ${error}` });\n  });\n});\n\n\n//this API is designed for creating new 'issues'\n//.post creates an object which is supplied from the body\napp.post('/api/issues',(req, res) => {\n  //req.body containts the body of created new issue, it's valid for post \n  //NOTE: req.body will be undefined, if there is no middleware (bodyParser f.e.x) for interpret\n  const newIssue = req.body;\n  newIssue.created = new Date();//because of we have no filed for setting date, we assign it here\n  //if created issue doesn't have any status from user initally, assign status 'New'\n  if (!newIssue.status) {\n    newIssue.status = 'New';\n  }\n  const err = Issue.validateIssue(newIssue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n  //insert newIssue variable, which contains created issue to data base\n  //before insert validate newIssue by cleanupIssue function from imported Issue variable\n  db.collection('issues').insertOne(Issue.cleanupIssue(newIssue)).then(result => \n    //while it's inserting, it gets new id, which stored in property insertedId\n    db.collection('issues').find({_id: result.insertedId}).limit(1)\n    .next()\n  )\n  .then(savedIssue => {\n    res.json(savedIssue);\n  })\n  .catch(error => {\n    console.log(error);\n    res.status(500).json({message: `Internal Server Error: ${error}` });\n  });\n});\n\napp.get('/api/issues/:id', (req, res) => {\n  let issueId;\n  console.log(req.params.id);\n  try {\n    issueId = new ObjectId(req.params.id);//for using ObjectId() you need import it from mongodb\n  } catch(error) {\n    res.status(422).json({ message: `Invalid issue ID format : ${error}` });\n    return;\n  }\n  db.collection('issues').find({ _id: issueId }).limit(1)\n    .next()\n    .then(issue => {\n      if(!issue) {\n        res.status(404).json({ message: `No such issue: ${issueId}` });\n      } else {\n        res.json(issue);\n      }\n    })\n    .catch(error => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error: ${error}`});\n    });\n});\napp.get('*', (req, res) => {\n  res.sendFile(path.resolve('static/index.html'));//sendFile(path) respons that exacly file corresponds to exaxtly path\n});\n//MongoClient is an object provided by mongodb module, allows us act as a client\n//'connect' method connecting the database from Node.js\nMongoClient.connect('mongodb://localhost/IssueTracker').then(connection => {\n  //assign our connection with mongo database (called IssueTracker) to global varibale db\n\tdb = connection.db('IssueTracker');\n\tapp.listen(3000, () => {//start express server after getting connection\n\t\tconsole.log(\"App started on port 3000\");\n\t});\t\n}).catch(error => {\n\tconsole.log('ERROR:', error);\n});\n//returning one and only one real page in our SPA for avoid situation, when router\n//can't find correct path /api/issues,(instead it find /issues) \n//after hitting 'reload' button in browser/ it also affects webpack.config 'historyApiFallback'\n"]}