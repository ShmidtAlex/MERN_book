{"version":3,"sources":["../server/server.js"],"names":["SourceMapSupport","install","app","use","express","static","bodyParser","json","db","get","req","res","filter","query","status","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","console","log","message","post","newIssue","body","created","Date","err","Issue","validateIssue","insertOne","cleanupIssue","result","_id","insertedId","limit","next","savedIssue","MongoClient","connect","connection","listen"],"mappings":";;AAAA;;;;AAEA;;AAEA;;;;AACA;;;;AACA;;AACA;;;;;;AANAA,2BAAiBC,OAAjB;;;AAQA,MAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQC,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAH,IAAIC,GAAJ,CAAQG,qBAAWC,IAAX,EAAR;;AAEA,IAAIC,EAAJ;;AAEAN,IAAIO,GAAJ,CAAQ,aAAR,EAAuB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACnC,QAAMC,SAAS,EAAf;AACA,MAAIF,IAAIG,KAAJ,CAAUC,MAAd,EAAsB;AACpBF,WAAOE,MAAP,GAAgBJ,IAAIG,KAAJ,CAAUC,MAA1B;AACD;AACFN,KAAGO,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6BJ,MAA7B,EAAqCK,OAArC,GACCC,IADD,CACMC,UAAU;AACf,UAAMC,WAAW,EAAEC,aAAaF,OAAOG,MAAtB,EAAjB;AACAX,QAAIJ,IAAJ,CAAS,EAAEgB,WAAWH,QAAb,EAAuBI,SAASL,MAAhC,EAAT;AACA,GAJD,EAKCM,KALD,CAKOC,SAAS;AACfC,YAAQC,GAAR,CAAYF,KAAZ;AACAf,QAAIG,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAAEsB,SAAU,yBAAwBH,KAAM,EAA1C,EAArB;AACA,GARD;AASA,CAdD;;AAiBA;;;AAGAxB,IAAI4B,IAAJ,CAAS,aAAT,EAAuB,CAACpB,GAAD,EAAMC,GAAN,KAAc;AACnC,QAAMoB,WAAWrB,IAAIsB,IAArB;AACAD,WAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,MAAI,CAACH,SAASjB,MAAd,EAAsB;AACpBiB,aAASjB,MAAT,GAAkB,KAAlB;AACD;AACD,QAAMqB,MAAMC,gBAAMC,aAAN,CAAoBN,QAApB,CAAZ;AACA,MAAII,GAAJ,EAAS;AACPxB,QAAIG,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAAEsB,SAAU,oBAAmBM,GAAI,EAAnC,EAArB;AACA;AACD;AACD3B,KAAGO,UAAH,CAAc,QAAd,EAAwBuB,SAAxB,CAAkCF,gBAAMG,YAAN,CAAmBR,QAAnB,CAAlC,EAAgEb,IAAhE,CAAqEsB,UACnEhC,GAAGO,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B,EAACyB,KAAKD,OAAOE,UAAb,EAA7B,EAAuDC,KAAvD,CAA6D,CAA7D,EACCC,IADD,EADF,EAIC1B,IAJD,CAIM2B,cAAc;AAClBlC,QAAIJ,IAAJ,CAASsC,UAAT;AACD,GAND,EAOCpB,KAPD,CAOOC,SAAS;AACdC,YAAQC,GAAR,CAAYF,KAAZ;AACAf,QAAIG,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAACsB,SAAU,0BAAyBH,KAAM,EAA1C,EAArB;AACD,GAVD;AAWD,CAtBD;;AAwBA;;;AAGAoB,qBAAYC,OAAZ,CAAoB,kCAApB,EAAwD7B,IAAxD,CAA6D8B,cAAc;AAC1ExC,OAAKwC,WAAWxC,EAAX,CAAc,cAAd,CAAL;AACAN,MAAI+C,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACtBtB,YAAQC,GAAR,CAAY,0BAAZ;AACA,GAFD;AAGA,CALD,EAKGH,KALH,CAKSC,SAAS;AACjBC,UAAQC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACA,CAPD","file":"server.js","sourcesContent":["import SourceMapSupport from 'source-map-support';\nSourceMapSupport.install();\nimport 'babel-polyfill';\n\nimport express from \"express\";\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nimport Issue from './issue.js'\n\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\nlet db;\n\napp.get('/api/issues', (req, res) => {\n  const filter = {};\n  if (req.query.status) {\n    filter.status = req.query.status;\n  }\n\tdb.collection('issues').find(filter).toArray()\n\t.then(issues => {\n\t\tconst metadata = { total_count: issues.length };\n\t\tres.json({ _metadata: metadata, records: issues });\n\t})\n\t.catch(error => {\n\t\tconsole.log(error);\n\t\tres.status(500).json({ message: `Internal Server error ${error}` });\n\t});\n});\n\n\n//this two objects define what is the valid object \"issue\"\n\n\napp.post('/api/issues',(req, res) => {\n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if (!newIssue.status) {\n    newIssue.status = 'New';\n  }\n  const err = Issue.validateIssue(newIssue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n  db.collection('issues').insertOne(Issue.cleanupIssue(newIssue)).then(result => \n    db.collection('issues').find({_id: result.insertedId}).limit(1)\n    .next()\n  )\n  .then(savedIssue => {\n    res.json(savedIssue);\n  })\n  .catch(error => {\n    console.log(error);\n    res.status(500).json({message: `Internal Server Error: ${error}` });\n  });\n});\n\n//throw new Error(\"TEST!!!\");\n\n\nMongoClient.connect('mongodb://localhost/IssueTracker').then(connection => {\n\tdb = connection.db('IssueTracker');\n\tapp.listen(3000, () => {\n\t\tconsole.log(\"App started on port 3000\");\n\t});\t\n}).catch(error => {\n\tconsole.log('ERROR:', error);\n});\n\n"]}